{"version":3,"sources":["widgets/ServerMemory.tsx","widgets/Time.tsx","widgets/Connected.tsx","widgets/Uptime.tsx","widgets/Github.tsx","widgets/Logo.tsx","widgets/AwsCost.tsx","lib/Countdown.js","widgets/Countdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Panel","styled","div","_templateObject","ServerMemory","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","listItems","state","payload","data","react_default","a","createElement","Fragment","key","atom","atom_used","binary","code","ets","processes","processes_used","system","total","channel","socket","join","receive","resp","console","log","on","setState","area","styled_css_grid_esm","style","background","React","Component","Time_templateObject","Content","p","_templateObject2","Time","date","format","time","backgroundColor","center","Time_Panel","Connected_templateObject","Connected_templateObject2","Connected","Connected_Panel","Connected_Content","Uptime_templateObject","Uptime","Uptime_Panel","map","el","icon","up","site","href","Github_templateObject","Github_templateObject2","Github","name","public_repos","Github_Panel","Github_Content","Logo_templateObject","Logo","Logo_Panel","width","src","concat","process","AwsCost_templateObject","AwsCost","current","parseFloat","current_month","ResultsByTime","Total","UnblendedCost","Amount","forecast","past","last_month","chartOptions","chart","height","type","plotOptions","radialBar","dataLabels","fontSize","value","show","label","TimePeriod","Start","formatter","w","toFixed","series","labels","ApexCharts","refs","cost_chart","render","AwsCost_Panel","ref","Countdown_templateObject","Countdown","days","hours","min","sec","_this2","interval","setInterval","calculateCountdown","stop","endDate","diff","Date","parse","timeLeft","years","Math","floor","clearInterval","String","length","countDown","hasDays","addLeadingZeros","Countdown_Panel","defaultProps","widgets_Countdown_templateObject","Countdown_templateObject2","widgets_Countdown_Panel","Countdown_Content","lib_Countdown","DATA_URL","App","Socket","connect","className","areas","columns","gap","Logo_Logo","AwsCost_AwsCost","Connected_Connected","Github_Github","ServerMemory_ServerMemory","Uptime_Uptime","Time_Time","Countdown_Logo","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f2c99e4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\ninterface Payload {\n  data: {\n    atom: number;\n    atom_used: number;\n    binary: number;\n    code: number;\n    ets: number;\n    processes: number;\n    processes_used: number;\n    system: number;\n    total: number;\n  };\n  timestamp: Date;\n}\n\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  color: white;\n  padding: 1rem;\n  font-size: 2rem;\n\n  li {\n    font-size: 1.2rem;\n  }\n`;\nexport default class ServerMemory extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\"data_source:server_memory\", {});\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      this.setState({ payload: payload });\n    });\n  }\n\n  listItems = () => {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n\n    const data: Payload = this.state.payload;\n    return (\n      <React.Fragment>\n        <li key=\"atom\">Atom: {data.data.atom}</li>\n        <li key=\"atom_used\">Atom Used: {data.data.atom_used}</li>\n        <li key=\"binary\">Binary: {data.data.binary}</li>\n        <li key=\"code\">Code: {data.data.code}</li>\n\n        <li key=\"ets\">ETS: {data.data.ets}</li>\n        <li key=\"processes\">Processes: {data.data.processes}</li>\n        <li key=\"processes_used\">Processes Used: {data.data.processes_used}</li>\n\n        <li key=\"data.system\">System: {data.data.system}</li>\n\n        <li key=\"total\">Total: {data.data.total}</li>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    const { area } = this.props;\n    return (\n      <Cell area={area} style={{ background: \"#253547\" }}>\n        <Panel>\n          <h2>Server Memory:</h2>\n          <ul>{this.listItems()}</ul>\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\nimport { format } from \"date-fns\";\ninterface Payload {\n  data: string;\n  timestamp: Date;\n}\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  color: white;\n  padding: 0.6rem;\n  font-size: 2rem;\n`;\n\nconst Content = styled.p`\n  font-size: 1.8rem;\n`;\n\nexport default class Time extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\"data_source:time\", {});\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      this.setState({ payload: payload });\n    });\n  }\n\n  render() {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n\n    const data: Payload = this.state.payload;\n    const date = format(data.data, \"MMMM Do, YYYY\");\n    const time = format(data.data, \"hh:mm:ss A\");\n    const { area } = this.props;\n    return (\n      <Cell area={area} style={{ backgroundColor: \"#4285f4\" }} center>\n        <Panel>\n          <h2>Time:</h2>\n          <div>\n            <Content>\n              {date} <br /> {time}\n            </Content>\n          </div>\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\n\ninterface Payload {\n  data: number;\n  timestamp: Date;\n}\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  color: white;\n  padding: 1rem;\n  font-size: 2rem;\n`;\n\nconst Content = styled.p`\n  font-size: 10rem;\n  margin: 0;\n`;\n\nexport default class Connected extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\n      \"data_source:connected_data_sources\",\n      {}\n    );\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      this.setState({ payload: payload });\n    });\n  }\n\n  render() {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n\n    const data: Payload = this.state.payload;\n    const { area } = this.props;\n    return (\n      <Cell area={area} style={{ backgroundColor: \"#34a852\" }} center>\n        <Panel>\n          <h2>Connected:</h2>\n          <Content>{data.data}</Content>\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\n\ninterface Sites {\n  site: string;\n  up: true;\n}\ninterface Payload {\n  data: Sites[];\n  timestamp: Date;\n}\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  padding: 1rem;\n  font-size: 2rem;\n\n  a {\n    color: black;\n    display: inline-block;\n    padding: 5px;\n    line-height: 1.2rem;\n    font-size: 1.3rem;\n  }\n`;\nexport default class Uptime extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\"data_source:cds_up\", {});\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      this.setState({ payload: payload });\n    });\n  }\n\n  render() {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n\n    const data: Payload = this.state.payload;\n    const { area } = this.props;\n    return (\n      <Cell area={area} style={{ backgroundColor: \"#c4d2de\" }}>\n        <Panel>\n          <h2>Domain Status:</h2>\n          {data.data.map(el => {\n            const icon = el.up ? \"✅\" : \"🚫\";\n            return (\n              <div key={el.site}>\n                {\" \"}\n                {icon} <a href={el.site}>{el.site}</a>{\" \"}\n              </div>\n            );\n          })}\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\ninterface Payload {\n  data: [{ blog: {} }];\n  timestamp: Date;\n}\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  color: white;\n  padding: 1rem;\n  font-size: 2rem;\n`;\n\nconst Content = styled.p`\n  font-size: 10rem;\n  margin: 0;\n`;\n\nexport default class Github extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\"data_source:github_org\", {});\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      console.log(payload);\n      this.setState({ payload: payload });\n    });\n  }\n\n  render() {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n    const { area } = this.props;\n    const data: any = this.state.payload;\n\n    let name = \"\";\n    if (data && data.data && data.data.public_repos) {\n      name = data.data.public_repos;\n    }\n\n    return (\n      <Cell area={area} style={{ backgroundColor: \"#be2dc1\" }} center>\n        <Panel>\n          <h2>Public Repos:</h2>\n          <Content>{name}</Content>\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\ninterface Props {\n  area: string;\n}\n\nconst Panel = styled.div`\n  background: #000;\n  color: white;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\nexport default class Logo extends React.Component<Props> {\n  render() {\n    const { area } = this.props;\n    return (\n      <Cell area={area} center style={{ backgroundColor: \"#000\" }}>\n        <Panel>\n          <img width=\"200px\" src={`${process.env.PUBLIC_URL}/logo.svg`} />\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\nimport ApexCharts from \"apexcharts\";\ninterface Payload {\n  data: any;\n  timestamp: Date;\n}\ninterface State {\n  payload: Payload;\n}\ninterface Props {\n  socket: Socket;\n  area: string;\n}\n\nconst Panel = styled.div`\n  color: #000;\n  padding: 1rem;\n  font-size: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default class AwsCost extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let channel = props.socket.channel(\"data_source:aws_cost\", {});\n    let chart: any;\n\n    channel.join().receive(\"error\", (resp: string) => {\n      console.log(\"Unable to join: \", resp);\n    });\n    channel.on(\"data\", (payload: Payload) => {\n      console.log(payload);\n      this.setState({ payload: payload });\n\n      let current = parseFloat(\n        payload.data.current_month.ResultsByTime[0].Total.UnblendedCost.Amount\n      );\n      let forecast = parseFloat(payload.data.forecast.Total.Amount);\n      let past = parseFloat(\n        payload.data.last_month.ResultsByTime[0].Total.UnblendedCost.Amount\n      );\n\n      let chartOptions = {\n        chart: {\n          height: 350,\n          type: \"radialBar\"\n        },\n        plotOptions: {\n          radialBar: {\n            dataLabels: {\n              name: {\n                fontSize: \"16px\"\n              },\n              value: {\n                fontSize: \"16px\"\n              },\n              total: {\n                show: true,\n                label: `Starting ${\n                  payload.data.current_month.ResultsByTime[0].TimePeriod.Start\n                }`,\n                formatter: function(w: string) {\n                  return `$${current.toFixed(2)} / $${past.toFixed(2)}`;\n                }\n              }\n            }\n          }\n        },\n        series: [\n          100,\n          ((forecast / past) * 100).toFixed(2),\n          ((current / past) * 100).toFixed(2)\n        ],\n        labels: [\"Last month\", \"Forecast\", \"Current month\"]\n      };\n      chart = new ApexCharts(this.refs.cost_chart, chartOptions);\n      chart.render();\n    });\n  }\n\n  render() {\n    if (!this.state || !this.state.payload) {\n      return null;\n    }\n\n    const { area } = this.props;\n\n    return (\n      <Cell center area={area} style={{ backgroundColor: \"#fff\" }}>\n        <Panel>\n          <h2>AWS Monthly spending:</h2>\n          <div ref=\"cost_chart\" />\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","/* eslint-disable */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Panel = styled.div`\n  color: #fff;\n`;\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0\n    };\n  }\n\n  componentDidMount() {\n    // update every second\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    // clear countdown when date is reached\n    if (diff <= 0) return false;\n\n    const timeLeft = {\n      years: 0,\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0\n    };\n\n    // calculate time difference between now and expected date\n    if (diff >= 365.25 * 86400) {\n      // 365.25 * 24 * 60 * 60\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\n      diff -= timeLeft.years * 365.25 * 86400;\n    }\n    if (diff >= 86400) {\n      // 24 * 60 * 60\n      timeLeft.days = Math.floor(diff / 86400);\n      diff -= timeLeft.days * 86400;\n    }\n    if (diff >= 3600) {\n      // 60 * 60\n      timeLeft.hours = Math.floor(diff / 3600);\n      diff -= timeLeft.hours * 3600;\n    }\n    if (diff >= 60) {\n      timeLeft.min = Math.floor(diff / 60);\n      diff -= timeLeft.min * 60;\n    }\n    timeLeft.sec = diff;\n\n    return timeLeft;\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  addLeadingZeros(value) {\n    value = String(value);\n    while (value.length < 2) {\n      value = \"0\" + value;\n    }\n    return value;\n  }\n\n  render() {\n    const countDown = this.state;\n    const hasDays = countDown.days;\n\n    const days =\n      hasDays >= 1 ? (\n        <div>\n          <span>\n            <strong>{this.addLeadingZeros(hasDays)}</strong>\n            <span>{hasDays === 1 ? \" Day\" : \" Days\"}</span>\n          </span>\n        </div>\n      ) : null;\n\n    return (\n      <Panel>\n        {days}\n        <div>\n          <span>{this.addLeadingZeros(countDown.hours)}:</span>\n          <span>{this.addLeadingZeros(countDown.min)}:</span>\n          <span>{this.addLeadingZeros(countDown.sec)}</span>\n        </div>\n      </Panel>\n    );\n  }\n}\n\nCountdown.propTypes = {\n  date: PropTypes.string.isRequired\n};\n\nCountdown.defaultProps = {\n  date: new Date()\n};\n\nexport default Countdown;\n","import React from \"react\";\nimport { Cell } from \"styled-css-grid\";\nimport styled from \"styled-components\";\nimport Countdown from \"../lib/Countdown\";\n\ninterface Props {\n  area: string;\n}\n\nconst Panel = styled.div`\n  background: #000;\n  color: white;\n  padding: 0.6rem;\n  font-size: 2rem;\n`;\n\nconst Content = styled.p`\n  font-size: 2rem;\n  margin: 0;\n`;\n\nexport default class Logo extends React.Component<Props> {\n  render() {\n    const { area } = this.props;\n    return (\n      <Cell area={area} center style={{ backgroundColor: \"#000\" }}>\n        <Panel>\n          <h2>Countdown:</h2>\n          <h3 style={{ fontSize: \"1.5rem\" }}>Show the dev tools!!</h3>\n          <Content>\n            <Countdown date={`2019-03-22T14:00:00`} />\n          </Content>\n        </Panel>\n      </Cell>\n    );\n  }\n}\n","import React from \"react\";\nimport { Socket } from \"phoenix\";\nimport { Grid } from \"styled-css-grid\";\nimport ServerMemory from \"./widgets/ServerMemory\";\nimport Time from \"./widgets/Time\";\nimport Connected from \"./widgets/Connected\";\nimport Uptime from \"./widgets/Uptime\";\nimport Github from \"./widgets/Github\";\nimport Logo from \"./widgets/Logo\";\nimport AwsCost from \"./widgets/AwsCost\";\nimport Countdown from \"./widgets/Countdown\";\n\n/* https://github.com/azz/styled-css-grid */\n\nconst DATA_URL = \"wss://loon-server.herokuapp.com/socket\";\n\ninterface Props {} // eslint-disable-line @typescript-eslint/no-empty-interface\nclass App extends React.Component<Props> {\n  socket: Socket; // eslint-disable-line  @typescript-eslint/explicit-member-accessibility\n  constructor(props: Props) {\n    super(props);\n    this.socket = new Socket(DATA_URL);\n    this.socket.connect();\n  }\n\n  render(): JSX.Element {\n    return (\n      <div className=\"App\">\n        <Grid\n          height=\"100vh\"\n          areas={[\"a b c d\", \"e f h g\"]}\n          columns=\"4\"\n          gap=\"10px\"\n        >\n          <Logo area=\"a\" />\n          <AwsCost area=\"b\" socket={this.socket} />\n          <Connected area=\"c\" socket={this.socket} />\n          <Github area=\"d\" socket={this.socket} />\n          <ServerMemory area=\"e\" socket={this.socket} />\n          <Uptime area=\"f\" socket={this.socket} />\n          <Time area=\"g\" socket={this.socket} />\n          <Countdown area=\"h\" />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}